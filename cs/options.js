// Generated by CoffeeScript 1.4.0
(function() {
  var $, animateCreatorName, bindAffiliationSelector, bindBusFields, bindCantinaSelector, bindFavoriteBusLines, bindPaletteSelector, bindSuggestions, changeCreatorName, changeOfficeStatusIcons, disableHardwareFeatures, enableHardwareFeatures, getDirections, getFavoriteLines, loadBus, ls, pageFlipCursorBlinking, popupHere, resizeBackgroundImage, restoreChecksToBoxes, revertInfoscreen, saveBus, showSavedNotification, slideFavoriteBusLines, testCoffeeSubscription, testDesktopNotification, toggleInfoscreen,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  ls = localStorage;

  resizeBackgroundImage = function() {
    if (1550 < $(window).width()) {
      return $('#background').attr("style", "background:url('img/background-large.png') center center no-repeat;");
    } else if (1200 < $(window).height()) {
      return $('#background').attr("style", "background:url('img/background-large-vertical.png') center center no-repeat;");
    } else {
      return $('#background').attr("style", "background:url('img/background-medium.png') center center no-repeat;");
    }
  };

  showSavedNotification = function() {
    $("#notification").fadeIn(200);
    return setTimeout((function() {
      return $("#notification").fadeOut(200);
    }), 800);
  };

  pageFlipCursorBlinking = function() {
    return setInterval((function() {
      return $(".pageflipcursor").animate({
        opacity: 0
      }, "fast", "swing", function() {
        return $(this).animate({
          opacity: 1
        }, "fast", "swing");
      });
    }), 600);
  };

  testDesktopNotification = function() {
    return News.showNotification();
  };

  testCoffeeSubscription = function() {
    return Coffee.showNotification();
  };

  bindAffiliationSelector = function(number, isPrimaryAffiliation) {
    var affiliationKey, id;
    id = 'affiliationKey' + number;
    affiliationKey = ls[id];
    $('#' + id).val(affiliationKey);
    return $('#' + id).change(function() {
      var icon, name, new_has_hardware, oldAffiliation, old_has_hardware, palette, symbol, web;
      affiliationKey = $(this).val();
      oldAffiliation = ls[id];
      ls[id] = affiliationKey;
      if (!isPrimaryAffiliation) {
        symbol = Affiliation.org[ls.affiliationKey2].symbol;
        $('#affiliation2Symbol').attr('style', 'background-image:url("' + symbol + '");');
        web = Affiliation.org[ls.affiliationKey2].web;
        $('#affiliation2Symbol').unbind('click');
        $('#affiliation2Symbol').click(function() {
          return Browser.openTab(web);
        });
      } else {
        old_has_hardware = Affiliation.org[oldAffiliation].hw ? true : false;
        new_has_hardware = Affiliation.org[affiliationKey].hw ? true : false;
        if (old_has_hardware && !new_has_hardware) {
          disableHardwareFeatures();
        } else if (!old_has_hardware && new_has_hardware) {
          enableHardwareFeatures();
        }
        if (new_has_hardware) {
          changeOfficeStatusIcons();
          ls.removeItem('officeStatus');
          ls.removeItem('officeStatusMessage');
          Browser.getBackgroundProcess().updateOfficeAndMeetings(true);
        }
        palette = Affiliation.org[affiliationKey].palette;
        if (palette !== void 0) {
          $('#affiliationPalette').val(palette);
          ls.affiliationPalette = palette;
          $('#palette').attr('href', Palettes.get(palette));
        }
        icon = Affiliation.org[affiliationKey].icon;
        Browser.setIcon(icon);
        $('link[rel="shortcut icon"]').attr('href', icon);
        symbol = Affiliation.org[affiliationKey].symbol;
        $('#affiliation1Symbol').attr('style', 'background-image:url("' + symbol + '");');
        $('#popupHere img.icon').attr('src', symbol);
        web = Affiliation.org[affiliationKey].web;
        $('#affiliation1Symbol').unbind('click');
        $('#affiliation1Symbol').click(function() {
          return Browser.openTab(web);
        });
        name = Affiliation.org[affiliationKey].name;
        Browser.setTitle(name + ' Notifier');
        ls.extensionName = name + ' Notifier';
        if (oldAffiliation === 'online') {
          ls.extensionCreator = 'Online';
          changeCreatorName(ls.extensionCreator);
        } else if (affiliationKey === 'online') {
          ls.extensionCreator = 'appKom';
          changeCreatorName(ls.extensionCreator);
        }
      }
      ls.removeItem('affiliationFeedItems' + number);
      if (ls['showAffiliation' + number] === 'true') {
        Browser.getBackgroundProcess().updateAffiliationNews(number);
      }
      showSavedNotification();
      Analytics.trackEvent('clickAffiliation' + number, affiliationKey);
      return popupHere(3000);
    });
  };

  bindPaletteSelector = function() {
    $('#affiliationPalette').val(ls.affiliationPalette);
    return $('#affiliationPalette').change(function() {
      var palette;
      palette = $(this).val();
      ls.affiliationPalette = palette;
      console.lolg('Applying chosen palette', palette);
      $('#palette').attr('href', Palettes.get(palette));
      showSavedNotification();
      return Analytics.trackEvent('clickPalette', palette);
    });
  };

  disableHardwareFeatures = function(quick) {
    ls.showOffice = 'false';
    ls.coffeeSubscription = 'false';
    if (quick) {
      $('label[for="showOffice"]').slideUp({
        duration: 0
      });
      $('label[for="coffeeSubscription"]').slideUp({
        duration: 0
      });
      $('#container').css('top', '60%');
      return $('header').css('top', '60%');
    } else {
      $('label[for="showOffice"]').slideUp('slow');
      return $('label[for="coffeeSubscription"]').slideUp('slow', function() {
        $('#container').animate({
          'top': '60%'
        }, 300);
        return $('header').animate({
          'top': '60%'
        }, 300);
      });
    }
  };

  enableHardwareFeatures = function(quick) {
    ls.showOffice = 'true';
    ls.coffeeSubscription = 'true';
    restoreChecksToBoxes();
    if (quick) {
      $('label[for="showOffice"]').slideDown({
        duration: 0
      });
      $('label[for="coffeeSubscription"]').slideDown({
        duration: 0
      });
      $('#container').css('top', '50%');
      return $('header').css('top', '50%');
    } else {
      Browser.getBackgroundProcess().updateOfficeAndMeetings(true);
      $('#container').animate({
        'top': '50%'
      }, 300);
      return $('header').animate({
        'top': '50%'
      }, 300, function() {
        $('label[for="showOffice"]').slideDown('slow');
        return $('label[for="coffeeSubscription"]').slideDown('slow');
      });
    }
  };

  changeOfficeStatusIcons = function() {
    var statusIcons;
    if (Affiliation.org[ls.affiliationKey1].hw) {
      statusIcons = Affiliation.org[ls.affiliationKey1].hw.statusIcons;
      $('img.icon.open').attr('src', statusIcons.open);
      $('img.icon.closed').attr('src', statusIcons.closed);
      $('img.icon.meeting').attr('src', statusIcons.meeting);
      return $('#officeStatusOverlay').attr('src', statusIcons.open);
    }
  };

  bindCantinaSelector = function(selector) {
    $('#' + selector).val(ls[selector]);
    return $('#' + selector).change(function() {
      var cantina;
      cantina = $(this).prop('value');
      ls[selector] = cantina;
      Analytics.trackEvent('clickCantina', cantina);
      Browser.getBackgroundProcess().updateHours();
      return Browser.getBackgroundProcess().updateCantinas();
    });
  };

  bindBusFields = function(busField) {
    var cssSelector, direction, fadeTime, stop;
    cssSelector = '#' + busField;
    fadeTime = 50;
    stop = $(cssSelector + ' input');
    direction = $(cssSelector + ' select');
    loadBus(busField);
    $(stop).focus(function() {
      console.lolg('focus - clear field and show saved value as placeholder');
      ls.busStopClickedAway = ls[busField + 'Name'];
      $(stop).val('');
      return $(stop).attr('placeholder', ls.busStopClickedAway);
    });
    $(stop).focusout(function() {
      var correctStop, partialStop, suggestions;
      partialStop = $(stop).val();
      suggestions = Stops.partialNameToPotentialNames(partialStop);
      if (partialStop === '' || suggestions.length === 0) {
        console.lolg('focusout - empty field or invalid input, return to last saved value');
        if (ls.busStopClickedAway !== null) {
          $(stop).val(ls.busStopClickedAway);
        }
        return $('#busSuggestions').html('');
      } else if (suggestions.length === 1) {
        console.lolg('focusout - 1 suggestion, save it');
        correctStop = suggestions[0];
        $(stop).val(correctStop);
        $('#busSuggestions').html('');
        getDirections(busField, correctStop);
        getFavoriteLines(busField);
        return saveBus(busField);
      } else if (suggestions.length > 1) {
        console.lolg('focusout - several suggestions, remove them');
        return setTimeout((function() {
          return $('#busSuggestions .suggestion').fadeOut(function() {
            return $('#busSuggestions').html('');
          });
        }), 5000);
      } else {
        return console.lolg('focusout - nothing to do');
      }
    });
    $(stop).keyup(function(event) {
      var correctStop, i, nameStart, possibleStop, realStopName, suggestion, suggestions, _ref, _ref1, _text;
      if ((_ref = event.keyCode, __indexOf.call([37, 38, 39, 40], _ref) >= 0) || (_ref1 = event.keyCode, __indexOf.call([17, 18], _ref1) >= 0) || event.keyCode === 91) {
        return console.lolg('keyup - arrow key or function key, do nothing');
      } else if (event.keyCode === 13) {
        console.lolg('keyup - enter, checking input');
        possibleStop = $(stop).val();
        suggestions = Stops.nameToIds(possibleStop);
        if (suggestions.length !== 0) {
          realStopName = Stops.idToName(suggestions[0]);
          $(stop).val(realStopName);
          $('#busSuggestions').html('');
          suggestion = $('<div class="correct">' + realStopName + '</div>').hide();
          $('#busSuggestions').append(suggestion);
          $(suggestion).fadeIn();
          setTimeout((function() {
            $('#busSuggestions .correct').fadeOut(fadeTime);
            return setTimeout((function() {
              return $('#busSuggestions').html('');
            }), 300);
          }), 1200);
          getDirections(busField, realStopName);
          getFavoriteLines(busField);
          return saveBus(busField);
        }
      } else {
        console.lolg('keyup - getting suggestions');
        ls.busInFocus = $(stop).parent().attr('id');
        nameStart = $(stop).val();
        if (nameStart.length > 0) {
          suggestions = Stops.partialNameToPotentialNames(nameStart);
          $('#busSuggestions').html('');
          for (i in suggestions) {
            _text = suggestions[i];
            suggestion = $('<div class="suggestion">' + _text + '</div>').hide();
            $('#busSuggestions').append(suggestion);
            $(suggestion).fadeIn();
          }
          if (suggestions.length === 1) {
            correctStop = suggestions[0];
            $(stop).val(correctStop);
            $(stop).blur();
            $('#busSuggestions').html('');
            suggestion = $('<div class="correct">' + correctStop + '</div>').hide();
            $('#busSuggestions').append(suggestion);
            $(suggestion).fadeIn();
            setTimeout((function() {
              $('#busSuggestions .correct').fadeOut(fadeTime);
              return setTimeout((function() {
                return $('#busSuggestions').html('');
              }), 300);
            }), 1200);
            getDirections(busField, correctStop);
            getFavoriteLines(busField);
            saveBus(busField);
          }
        } else {
          $('#busSuggestions .suggestion').fadeOut(fadeTime, function() {
            return $('#busSuggestions').html('');
          });
        }
        return bindSuggestions();
      }
    });
    $(direction).change(function() {
      getFavoriteLines(busField);
      return saveBus(busField);
    });
    return bindFavoriteBusLines(busField);
  };

  bindFavoriteBusLines = function(busField) {
    var cssSelector;
    cssSelector = '#' + busField;
    return $(cssSelector + ' .lines .line').click(function() {
      if ($(this).hasClass('active')) {
        $(this).attr('class', 'inactive');
      } else if ($(this).hasClass('inactive')) {
        $(this).attr('class', 'active');
      } else {
        console.log('ERROR: favorite bus line <span> with neither .active nor .inactive');
      }
      return saveBus(busField);
    });
  };

  getDirections = function(busField, correctStop) {
    var allDirections, cssSelector, direction, i, stopName, _i, _len, _results;
    cssSelector = '#' + busField;
    stopName = $(cssSelector + ' input');
    direction = $(cssSelector + ' select');
    allDirections = Stops.nameToDirections(correctStop);
    $(direction).html('');
    _results = [];
    for (_i = 0, _len = allDirections.length; _i < _len; _i++) {
      i = allDirections[_i];
      _results.push($(direction).append('<option>' + i + '</option>'));
    }
    return _results;
  };

  getFavoriteLines = function(busField) {
    var busStopId, counter, cssSelector, direction, line, lines, stopName, _i, _len;
    cssSelector = '#' + busField;
    $('#busBox .lines').slideDown();
    $('#busBox #arrowDown').fadeOut();
    stopName = $(cssSelector + ' input').val();
    direction = $(cssSelector + ' select').val();
    busStopId = Stops.nameAndDirectionToId(stopName, direction);
    lines = Favorite.getLinesForStop(busStopId);
    if (typeof lines === 'string') {
      $(cssSelector + ' .lines').html('<span class="error">' + lines + '</span>');
    } else {
      $(cssSelector + ' .lines').html('<table border="0" cellpadding="0" cellspacing="0"><tr>');
      counter = 0;
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (counter % 4 === 0) {
          $(cssSelector + ' .lines table').append('</tr><tr>');
        }
        $(cssSelector + ' .lines table tr:last').append('<td class="line active">' + line + '</td>');
        counter = counter + 1;
      }
      $(cssSelector + ' .lines').append('</tr></table>');
      saveBus(busField);
      bindFavoriteBusLines(busField);
    }
    return setTimeout((function() {
      if (!$('#busBox').hasClass('hover')) {
        $('#busBox .lines').slideUp();
        return $('#busBox #arrowDown').fadeIn();
      }
    }), 2500);
  };

  saveBus = function(busField) {
    var activeLines, busStopId, cssSelector, direction, inactiveLines, stopName;
    cssSelector = '#' + busField;
    stopName = $(cssSelector + ' input').val();
    direction = $(cssSelector + ' select').val();
    busStopId = Stops.nameAndDirectionToId(stopName, direction);
    activeLines = [];
    $(cssSelector + ' .lines .active').each(function() {
      return activeLines.push(Number($(this).text()));
    });
    inactiveLines = [];
    $(cssSelector + ' .lines .inactive').each(function() {
      return inactiveLines.push(Number($(this).text()));
    });
    ls[busField] = busStopId;
    ls[busField + 'Name'] = stopName;
    ls[busField + 'Direction'] = direction;
    ls[busField + 'ActiveLines'] = JSON.stringify(activeLines);
    ls[busField + 'InactiveLines'] = JSON.stringify(inactiveLines);
    console.lolg('saved activeLines for ' + busField, '"', activeLines, '"');
    console.lolg('saved inactiveLines ' + busField, '"', inactiveLines, '"');
    console.lolg('saved http://api.visuweb.no/bybussen/1.0/Departure/Realtime/' + busStopId + '/f6975f3c1a3d838dc69724b9445b3466');
    return showSavedNotification();
  };

  loadBus = function(busField) {
    var activeLines, counter, cssSelector, direction, i, inactiveLines, keys, line, lines, status, stopName, _i, _j, _k, _len, _len1, _len2;
    cssSelector = '#' + busField;
    stopName = ls[busField + 'Name'];
    direction = ls[busField + 'Direction'];
    activeLines = ls[busField + 'ActiveLines'];
    inactiveLines = ls[busField + 'InactiveLines'];
    if (stopName !== void 0 && direction !== void 0) {
      $(cssSelector + ' input').val(stopName);
      $(cssSelector + ' select').val(direction);
    }
    if (activeLines !== void 0 && inactiveLines !== void 0) {
      if (activeLines === '' && inactiveLines === '') {
        return getFavoriteLines(busField);
      } else {
        activeLines = JSON.parse(activeLines);
        inactiveLines = JSON.parse(inactiveLines);
        lines = {};
        for (_i = 0, _len = activeLines.length; _i < _len; _i++) {
          line = activeLines[_i];
          lines[line] = true;
        }
        for (_j = 0, _len1 = inactiveLines.length; _j < _len1; _j++) {
          line = inactiveLines[_j];
          lines[line] = false;
        }
        keys = [];
        for (i in lines) {
          keys.push(i);
        }
        keys = keys.sort(function(a, b) {
          return a - b;
        });
        $(cssSelector + ' .lines').html('<table border="0" cellpadding="0" cellspacing="0"><tr>');
        counter = 0;
        for (_k = 0, _len2 = keys.length; _k < _len2; _k++) {
          i = keys[_k];
          if (counter % 4 === 0) {
            $(cssSelector + ' .lines table').append('</tr><tr>');
          }
          status = lines[i] === true ? 'active' : 'inactive';
          $(cssSelector + ' .lines table tr:last').append('<td class="line ' + status + '">' + i + '</td>');
          counter = counter + 1;
        }
        return $(cssSelector + ' .lines').append('</tr></table>');
      }
    }
  };

  slideFavoriteBusLines = function() {
    setTimeout((function() {
      if (!$('#busBox').hasClass('hover')) {
        $('#busBox .lines').slideUp();
        return $('#busBox #arrowDown').fadeIn();
      }
    }), 1500);
    $('#busBox').mouseenter(function() {
      clearTimeout($(this).data('timeoutId'));
      $('#busBox .lines').slideDown();
      return $('#busBox #arrowDown').fadeOut();
    });
    return $('#busBox').mouseleave(function() {
      var timeoutId;
      timeoutId = setTimeout((function() {
        if ($('#busBox .lines img').length === 0) {
          $('#busBox .lines').slideUp();
          return $('#busBox #arrowDown').fadeIn();
        }
      }), 500);
      return $('#busBox').data('timeoutId', timeoutId);
    });
  };

  bindSuggestions = function() {
    return $('.suggestion').click(function() {
      var text;
      if (ls.busInFocus !== void 0) {
        text = $(this).text();
        $('#' + ls.busInFocus + ' input').val(text);
        getDirections(ls.busInFocus, text);
        getFavoriteLines(ls.busInFocus);
        saveBus(ls.busInFocus);
        return $('#busSuggestions .suggestion').fadeOut(50, function() {
          return $('#busSuggestions').html('');
        });
      }
    });
  };

  toggleInfoscreen = function(activate, force) {
    var speed;
    speed = 400;
    if (activate) {
      $('#useInfoscreen').attr('checked', false);
      $('#infoscreenPreview').attr('src', 'infoscreen.html');
      $('#headerText').fadeOut();
      return $('#container #left').animate({
        'width': '0'
      }, speed, function() {
        $('#container #left').hide();
        return $('#infoscreenSlider').slideUp(speed, function() {
          return $('img#useInfoscreen').slideUp(speed, function() {
            return $('#infoscreenPreview').slideDown(speed, function() {
              $('#headerText').html('<b>Info</b>screen');
              return $('#headerText').fadeIn(function() {
                $('#container #right').animate({
                  'margin-left': '213px'
                }, speed);
                $('header').animate({
                  'top': '50%'
                }, speed);
                return $('#container').animate({
                  'top': '50%'
                }, speed, function() {
                  var name;
                  name = Affiliation.org[ls.affiliationKey1].name;
                  if (force || confirm('Sikker på at du vil skru på ' + name + ' Infoscreen?\n\n- Krever full-HD skjerm som står på høykant\n- Popup-knappen åpner Infoskjerm i stedet\n- Infoskjermen skjuler musepekeren\n- Infoskjermen åpnes hver gang ' + Browser.name + ' starter')) {
                    ls['useInfoscreen'] = 'true';
                    $('#useInfoscreen').prop('checked', true);
                    Browser.setIcon(Affiliation.org[ls.affiliationKey1].icon);
                    Browser.setTitle(Affiliation.org[ls.affiliationKey1].name + ' Infoscreen');
                    Browser.setBadgeText('');
                    if (!force) {
                      return Browser.openBackgroundTab('infoscreen.html');
                    }
                  } else {
                    return revertInfoscreen();
                  }
                });
              });
            });
          });
        });
      });
    } else {
      ls['useInfoscreen'] = 'false';
      if (Affiliation.org[ls.affiliationKey1].hw) {
        Browser.getBackgroundProcess().updateOfficeAndMeetings(true);
      } else {
        Browser.setIcon(Affiliation.org[ls.affiliationKey1].icon);
        Browser.setTitle(Affiliation.org[ls.affiliationKey1].name + ' Notifier');
      }
      return revertInfoscreen();
    }
  };

  revertInfoscreen = function() {
    var speed;
    speed = 300;
    return $('#headerText').fadeOut(speed, function() {
      if (Affiliation.org[ls.affiliationKey1].hw) {
        $('#container').animate({
          'top': '50%'
        }, speed);
        $('header').animate({
          'top': '50%'
        }, speed);
      } else {
        $('#container').animate({
          'top': '60%'
        }, speed);
        $('header').animate({
          'top': '60%'
        }, speed);
      }
      $('#container #right').animate({
        'margin-left': '0'
      }, speed);
      return $('#infoscreenPreview').slideUp(speed, function() {
        return $('img#useInfoscreen').slideDown(speed, function() {
          return $('#infoscreenSlider').slideDown(speed, function() {
            $('#container #left').show();
            return $('#container #left').animate({
              'width': '54%'
            }, speed, function() {
              $('#headerText').html('<b>Notifier</b> Options');
              return $('#headerText').fadeIn(function() {
                return $('#infoscreenPreview').attr('src', 'about:blank');
              });
            });
          });
        });
      });
    });
  };

  restoreChecksToBoxes = function() {
    return $('input:checkbox').each(function(index, element) {
      if (ls[element.id] === 'true') {
        return element.checked = true;
      }
    });
  };

  changeCreatorName = function(name) {
    clearTimeout(Number(ls.animateCreatorNameTimeoutId));
    return animateCreatorName(name + " with <3");
  };

  animateCreatorName = function(line, build) {
    var random, text;
    text = $('#pagefliptyping').text();
    if (text.length === 0) {
      build = true;
    }
    random = Math.floor(350 * Math.random() + 50);
    if (!build) {
      $('#pagefliptyping').text(text.slice(0, text.length - 1));
      return ls.animateCreatorNameTimeoutId = setTimeout((function() {
        return animateCreatorName(line);
      }), random);
    } else {
      if (text.length !== line.length) {
        if (text.length === 0) {
          $('#pagefliptyping').text(line.slice(0, 1));
        } else {
          $('#pagefliptyping').text(line.slice(0, text.length + 1));
        }
        return ls.animateCreatorNameTimeoutId = setTimeout((function() {
          return animateCreatorName(line, true);
        }), random);
      }
    }
  };

  popupHere = function(time) {
    if (time === void 0) {
      time = 7000;
    }
    return setTimeout((function() {
      $('#popupHere').fadeIn('swing');
      return setTimeout((function() {
        return $('#popupHere').fadeOut('fast');
      }), 7000);
    }), time);
  };

  $(function() {
    var icon, symbol, symbol2, text, web1, web2;
    if (DEBUG) {
      $('#debugLinks').show();
      $('button.debug').click(function() {
        return Browser.openTab($(this).attr('data'));
      });
    }
    if (!Affiliation.org[ls.affiliationKey1].hw) {
      disableHardwareFeatures(true);
    }
    icon = Affiliation.org[ls.affiliationKey1].icon;
    $('link[rel="shortcut icon"]').attr('href', icon);
    symbol = Affiliation.org[ls.affiliationKey1].symbol;
    $('#affiliation1Symbol').attr('style', 'background-image:url("' + symbol + '");');
    symbol2 = Affiliation.org[ls.affiliationKey2].symbol;
    $('#affiliation2Symbol').attr('style', 'background-image:url("' + symbol2 + '");');
    web1 = Affiliation.org[ls.affiliationKey1].web;
    $('#affiliation1Symbol').unbind('click');
    $('#affiliation1Symbol').click(function() {
      return Browser.openTab(web1);
    });
    web2 = Affiliation.org[ls.affiliationKey2].web;
    $('#affiliation2Symbol').unbind('click');
    $('#affiliation2Symbol').click(function() {
      return Browser.openTab(web2);
    });
    $('#palette').attr('href', Palettes.get(ls.affiliationPalette));
    changeOfficeStatusIcons();
    $('#popupHere img.icon').attr('src', symbol);
    restoreChecksToBoxes();
    if (ls.useInfoscreen === 'true') {
      setTimeout((function() {
        return toggleInfoscreen(true, true);
      }), 300);
    }
    $(window).bind("resize", resizeBackgroundImage);
    resizeBackgroundImage();
    if (Browser.onWindows()) {
      $('#pfText').attr("style", "bottom:9px;");
      $('#pfLink').attr("style", "bottom:9px;");
    }
    $('#pfLink').click(function() {
      return Analytics.trackEvent('clickPageflip');
    });
    setTimeout((function() {
      return changeCreatorName(ls.extensionCreator);
    }), 2500);
    pageFlipCursorBlinking();
    popupHere();
    bindAffiliationSelector('1', true);
    bindAffiliationSelector('2', false);
    bindPaletteSelector();
    if (ls.showAffiliation2 !== 'true') {
      $('#affiliationKey2').attr('disabled', 'disabled');
    }
    bindCantinaSelector('leftCantina');
    bindCantinaSelector('rightCantina');
    bindBusFields('firstBus');
    bindBusFields('secondBus');
    slideFavoriteBusLines();
    Stops.load();
    if (Browser.name === 'Opera') {
      $('input#showNotifications').prop("disabled", "disabled");
      $('input#showNotifications').prop("checked", "false");
      text = 'Varsle om nyheter';
      $('label[for=showNotifications] span').html('<del>' + text + '</del> <b>Vent på ny Opera</b>');
      $('input#coffeeSubscription').prop("disabled", "disabled");
      $('input#coffeeSubscription').prop("checked", "false");
      text = $('label[for=coffeeSubscription] span').text();
      text = text.trim();
      $('label[for=coffeeSubscription] span').html('<del>' + text + '</del> <b>Vent på ny Opera</b>');
    }
    $('#busBox').hover(function() {
      return $(this).addClass('hover');
    }, function() {
      return $(this).removeClass('hover');
    });
    return $('input:checkbox').click(function() {
      var _capitalized;
      _capitalized = this.id.charAt(0).toUpperCase() + this.id.slice(1);
      Analytics.trackEvent('click' + _capitalized, this.checked);
      if (this.id === 'useInfoscreen') {
        return toggleInfoscreen(this.checked);
      } else {
        ls[this.id] = this.checked;
        if (this.id === 'showAffiliation2' && this.checked === false) {
          $('#affiliationKey2').attr('disabled', 'disabled');
        }
        if (this.id === 'showAffiliation2' && this.checked === true) {
          $('#affiliationKey2').removeAttr('disabled');
        }
        if (this.id === 'showOffice' && this.checked === true) {
          ls.activelySetOffice = 'true';
          Browser.getBackgroundProcess().updateOfficeAndMeetings(true);
        }
        if (this.id === 'showOffice' && this.checked === false) {
          ls.activelySetOffice = 'false';
          Browser.setIcon(Affiliation.org[ls.affiliationKey1].icon);
          Browser.setTitle(ls.extensionName);
        }
        if (this.id === 'showNotifications' && this.checked === true) {
          testDesktopNotification();
        }
        if (this.id === 'coffeeSubscription' && this.checked === true) {
          ls.activelySetCoffee = 'true';
          testCoffeeSubscription();
        }
        if (this.id === 'coffeeSubscription' && this.checked === false) {
          ls.activelySetCoffee = 'false';
        }
        return showSavedNotification();
      }
    });
  });

}).call(this);
