// Generated by CoffeeScript 1.4.0
(function() {
  var $, animateCreatorName, changeCreatorName, clickDinnerLink, clickHours, createBusDataRequest, displayItems, findUpdatedPosts, insertBusInfo, intervalId, iteration, listDinners, ls, mainLoop, newsLimit, officeFontRotate, updateAffiliationNews, updateBus, updateCantinas, updateCoffee, updateHours, updateMeetings, updateNewsImages, updateOffice, updateServant,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  $ = jQuery;

  ls = localStorage;

  iteration = 0;

  intervalId = null;

  newsLimit = 8;

  mainLoop = function(force) {
    console.lolg("\n#" + iteration);
    if (ls.showCantina === 'true') {
      if (force || iteration % UPDATE_HOURS_INTERVAL === 0) {
        updateHours();
      }
    }
    if (ls.showCantina === 'true') {
      if (force || iteration % UPDATE_CANTINAS_INTERVAL === 0) {
        updateCantinas();
      }
    }
    if (ls.showAffiliation1 === 'true') {
      if (force || iteration % UPDATE_NEWS_INTERVAL === 0) {
        updateAffiliationNews('1');
      }
    }
    if (ls.showAffiliation2 === 'true') {
      if (force || iteration % UPDATE_NEWS_INTERVAL === 0) {
        updateAffiliationNews('2');
      }
    }
    if (Affiliation.org[ls.affiliationKey1].hw) {
      if (ls.showOffice === 'true') {
        if (force || iteration % UPDATE_OFFICE_INTERVAL === 0) {
          updateOffice();
        }
      }
      if (ls.showOffice === 'true') {
        if (force || iteration % UPDATE_SERVANT_INTERVAL === 0) {
          updateServant();
        }
      }
      if (ls.showOffice === 'true') {
        if (force || iteration % UPDATE_MEETINGS_INTERVAL === 0) {
          updateMeetings();
        }
      }
      if (ls.showOffice === 'true') {
        if (force || iteration % UPDATE_COFFEE_INTERVAL === 0) {
          updateCoffee();
        }
      }
    }
    if (ls.showBus === 'true') {
      if (force || iteration % UPDATE_BUS_INTERVAL === 0) {
        updateBus();
      }
    }
    if (10000 < iteration) {
      return iteration = 0;
    } else {
      return iteration++;
    }
  };

  updateOffice = function(debugStatus) {
    console.lolg('updateOffice');
    return Office.get(function(status, message) {
      var msgs;
      if (DEBUG && debugStatus) {
        status = debugStatus;
        message = 'debugging';
      }
      if (ls.infoscreenOfficeStatus !== status || ls.infoscreenOfficeStatusMessage !== message) {
        if (__indexOf.call(Object.keys(Office.foods), status) >= 0) {
          if (Office.foods[status].image !== void 0) {
            $('#office #status img').attr('src', Office.foods[status].image);
            $('#office #status #text').hide();
            $('#office #status img').show();
          } else {
            $('#office #status #text').text(Office.foods[status].title);
            $('#office #status #text').css('color', Office.foods[status].color);
            $('#office #status img').hide();
            $('#office #status #text').show();
          }
        } else {
          $('#office #status #text').html(Office.statuses[status].title);
          $('#office #status #text').css('color', Office.statuses[status].color);
          $('#office #status img').hide();
          $('#office #status #text').show();
        }
        ls.infoscreenOfficeStatus = status;
        ls.infoscreenOfficeStatusMessage = message;
        msgs = Affiliation.org[ls.affiliationKey1].hw.statusMessages;
        if (msgs) {
          if (msgs[status]) {
            message = msgs[status];
          }
        }
        return $('#office #subtext').html(message);
      }
    });
  };

  updateServant = function() {
    console.lolg('updateServant');
    return Servant.get(function(servant) {
      return $('#todays #schedule #servant').html('- ' + servant);
    });
  };

  updateMeetings = function() {
    console.lolg('updateMeetings');
    return Meetings.get(function(meetings) {
      meetings = meetings.replace(/\n/g, '<br />');
      return $('#todays #schedule #meetings').html(meetings);
    });
  };

  updateCoffee = function() {
    console.lolg('updateCoffee');
    return Coffee.get(true, function(pots, age) {
      $('#todays #coffee #pots').html('- ' + pots);
      return $('#todays #coffee #age').html(age);
    });
  };

  updateCantinas = function(first) {
    var menu1, menu2, update;
    console.lolg('updateCantinas');
    update = function(shortname, menu, selector) {
      var name;
      name = Cantina.names[shortname];
      $('#cantinas #' + selector + ' .title').html(name);
      $('#cantinas #' + selector + ' #dinnerbox').html(listDinners(menu));
      return clickDinnerLink('#cantinas #' + selector + ' #dinnerbox li', shortname);
    };
    menu1 = JSON.parse(ls.leftCantinaMenu);
    menu2 = JSON.parse(ls.rightCantinaMenu);
    update(ls.leftCantina, menu1, 'left');
    return update(ls.rightCantina, menu2, 'right');
  };

  listDinners = function(menu) {
    var dinner, dinnerlist, _i, _len;
    dinnerlist = '';
    if (typeof menu === 'string') {
      ls.noDinnerInfo = 'true';
      dinnerlist += '<li>' + menu + '</li>';
    } else {
      ls.noDinnerInfo = 'false';
      for (_i = 0, _len = menu.length; _i < _len; _i++) {
        dinner = menu[_i];
        if (dinner.price !== null) {
          dinner.price = dinner.price + ',-';
          dinnerlist += '<li id="' + dinner.index + '">' + dinner.price + ' ' + dinner.text + '</li>';
        } else {
          dinnerlist += '<li class="message" id="' + dinner.index + '">"' + dinner.text + '"</li>';
        }
      }
    }
    return dinnerlist;
  };

  clickDinnerLink = function(cssSelector, cantina) {
    return $(cssSelector).click(function() {
      Analytics.trackEvent('clickDinner', $(this).text());
      ls.clickedCantina = cantina;
      Browser.openTab(Cantina.url);
      return window.close();
    });
  };

  updateHours = function(first) {
    var update;
    console.lolg('updateHours');
    update = function(shortname, hours, selector) {
      $('#cantinas #' + selector + ' .hours').html(hours);
      return clickHours('#cantinas #' + selector + ' .hours', shortname);
    };
    update(ls.leftCantina, ls.leftCantinaHours, 'left');
    return update(ls.rightCantina, ls.rightCantinaHours, 'right');
  };

  clickHours = function(cssSelector, cantina) {
    return $(cssSelector).click(function() {
      Analytics.trackEvent('clickHours', $(this).text());
      ls.clickedHours = Hours.cantinas[cantina];
      Browser.openTab(Hours.url);
      return window.close();
    });
  };

  updateBus = function() {
    var i, j, spans, stops;
    console.lolg('updateBus');
    if (!navigator.onLine) {
      stops = ['firstBus', 'secondBus'];
      spans = ['first', 'second', 'third', 'fourth'];
      for (i in stops) {
        for (j in spans) {
          $('#bus #' + stops[i] + ' .' + spans[j] + ' .line').html('');
          $('#bus #' + stops[i] + ' .' + spans[j] + ' .time').html('');
        }
      }
      $('#bus #firstBus .name').html(ls.firstBusName);
      $('#bus #secondBus .name').html(ls.secondBusName);
      $('#bus #firstBus .error').html('<div class="error">Frakoblet fra api.visuweb.no</div>');
      return $('#bus #secondBus .error').html('<div class="error">Frakoblet fra api.visuweb.no</div>');
    } else {
      createBusDataRequest('firstBus', '#firstBus');
      return createBusDataRequest('secondBus', '#secondBus');
    }
  };

  createBusDataRequest = function(bus, cssIdentificator) {
    var activeLines;
    activeLines = ls[bus + 'ActiveLines'];
    activeLines = JSON.parse(activeLines);
    return Bus.get(ls[bus], activeLines, function(lines) {
      return insertBusInfo(lines, ls[bus + 'Name'], cssIdentificator);
    });
  };

  insertBusInfo = function(lines, stopName, cssIdentificator) {
    var busStop, i, spans, _results;
    busStop = '#bus ' + cssIdentificator;
    spans = ['first', 'second', 'third', 'fourth'];
    $(busStop + ' .name').html(stopName);
    for (i in spans) {
      $(busStop + ' .' + spans[i] + ' .line').html('');
      $(busStop + ' .' + spans[i] + ' .time').html('');
    }
    $(busStop + ' .error').html('');
    if (typeof lines === 'string') {
      return $(busStop + ' .error').html(lines);
    } else {
      if (lines['departures'].length === 0) {
        return $(busStop + ' .error').html('....zzzZZZzzz....');
      } else {
        _results = [];
        for (i in spans) {
          $(busStop + ' .' + spans[i] + ' .line').append(lines['destination'][i]);
          _results.push($(busStop + ' .' + spans[i] + ' .time').append(lines['departures'][i]));
        }
        return _results;
      }
    }
  };

  updateAffiliationNews = function(number) {
    var feedItems, key, name, selector;
    console.lolg('updateAffiliationNews' + number);
    feedItems = ls['affiliationFeedItems' + number];
    selector = number === '1' ? '#left' : '#right';
    if (ls.showAffiliation2 !== 'true') {
      selector = '#full';
    }
    if (feedItems !== void 0) {
      feedItems = JSON.parse(feedItems);
      return displayItems(feedItems, selector, 'affiliationNewsList' + number, 'affiliationViewedList' + number, 'affiliationUnreadCount' + number);
    } else {
      key = ls['affiliationKey' + number];
      name = Affiliation.org[key].name;
      $('#news ' + selector).html('<div class="post"><div class="item"><div class="title">' + name + '</div>Frakoblet fra nyhetsstr√∏m</div></div>');
      return $('#news ' + selector).click(function() {
        return Browser.openTab(Affiliation.org[key].web);
      });
    }
  };

  displayItems = function(items, column, newsListName, viewedListName, unreadCountName) {
    var feedKey, i, newsList, storedImages, times, updatedList, viewedList, _results;
    $('#news ' + column).html('');
    feedKey = items[0].feedKey;
    newsList = JSON.parse(ls[newsListName]);
    viewedList = JSON.parse(ls[viewedListName]);
    updatedList = findUpdatedPosts(newsList, viewedList);
    viewedList = [];
    storedImages = JSON.parse(ls.storedImages);
    $.each(items, function(index, item) {
      var altLink, date, descLimit, htmlItem, readUnread, storedImage, unreadCount, _ref;
      if (index < newsLimit) {
        viewedList.push(item.link);
        unreadCount = Number(ls[unreadCountName]);
        readUnread = '';
        if (!Affiliation.org[feedKey].flashyNews) {
          if (index < unreadCount) {
            if (_ref = item.link, __indexOf.call(updatedList.indexOf, _ref) >= 0) {
              readUnread += '<span class="unread">UPDATED <b>::</b> </span>';
            } else {
              readUnread += '<span class="unread">NEW <b>::</b> </span>';
            }
          }
        }
        date = altLink = '';
        if (item.altLink !== null) {
          altLink = ' name="' + item.altLink + '"';
        }
        descLimit = 140;
        if (ls.showAffiliation2 === 'true') {
          descLimit = 100;
        }
        if (item.description.length > descLimit) {
          item.description = item.description.substr(0, descLimit) + '...';
        }
        storedImage = storedImages[item.link];
        if (storedImage !== void 0) {
          if (-1 === item.image.indexOf('http')) {
            item.image = storedImage;
          }
        }
        if (Affiliation.org[feedKey].flashyNews && ls.showAffiliation2 === 'true') {
          htmlItem = '\
          <div class="post">\
            <div class="item" data="' + item.link + '"' + altLink + '>\
              <img class="flashy" src="' + item.image + '" />\
              <div class="title flashy">' + readUnread + item.title + '</div>\
              <div class="author flashy">&ndash; Av ' + item.creator + '</div>\
            </div>\
          </div>';
        } else {
          htmlItem = '\
          <div class="post">\
            <div class="item" data="' + item.link + '"' + altLink + '>\
              <div class="title">' + readUnread + item.title + '</div>\
              <img class="regular" src="' + item.image + '" />\
              ' + item.description + '\
              <div class="author">&ndash; Av ' + item.creator + '</div>\
            </div>\
          </div>';
        }
        return $('#news ' + column).append(htmlItem);
      }
    });
    ls[viewedListName] = JSON.stringify(viewedList);
    Browser.setBadgeText('');
    ls[unreadCountName] = 0;
    $('#news ' + column + ' .item').click(function() {
      var altLink, link, useAltLink;
      link = $(this).attr('data');
      altLink = $(this).attr('name');
      useAltLink = Affiliation.org[feedKey].useAltLink;
      if (altLink !== void 0 && useAltLink === true) {
        link = $(this).attr('name');
      }
      Browser.openTab(link);
      Analytics.trackEvent('clickNews', link);
      return window.close();
    });
    times = [100, 500, 1000, 2000, 3000, 5000, 10000];
    _results = [];
    for (i in times) {
      _results.push(setTimeout((function() {
        return updateNewsImages();
      }), times[i]));
    }
    return _results;
  };

  findUpdatedPosts = function(newsList, viewedList) {
    var i, j, updatedList;
    updatedList = [];
    for (i in newsList) {
      if (newsList[i] === viewedList[0]) {
        break;
      }
      for (j in viewedList) {
        if (j === 0) {
          continue;
        }
        if (newsList[i] === viewedList[j]) {
          updatedList.push(newsList[i]);
        }
      }
    }
    return updatedList;
  };

  updateNewsImages = function() {
    console.lolg('updateNewsImages');
    return $.each($('#news .post .item'), function(i, val) {
      var image, link;
      link = $(this).attr('data');
      image = JSON.parse(localStorage.storedImages)[link];
      if (image !== void 0) {
        return $(this).find('img').attr('src', image);
      }
    });
  };

  officeFontRotate = function(font) {
    var chosenFont, fonts;
    fonts = ['cardo', 'fondamento', 'oleoscript', 'sourcesans'];
    if (__indexOf.call(fonts, font) >= 0) {
      chosenFont = font;
    } else {
      chosenFont = fonts[Math.floor(Math.random() * fonts.length)];
    }
    $('#office #status #text').prop('class', chosenFont);
    if (DEBUG) {
      return $('#office #subtext').html(ls.infoscreenOfficeStatusMessage + '<br />' + chosenFont);
    }
  };

  changeCreatorName = function(name) {
    clearTimeout(ls.changeCreatorNameTimeoutId);
    return animateCreatorName(name);
  };

  animateCreatorName = function(name, build) {
    var random, text;
    text = $('#pagefliptyping').text();
    if (text.length === 0) {
      build = true;
      name = name + " with <3";
    }
    random = Math.floor(350 * Math.random() + 50);
    if (!build) {
      $('#pagefliptyping').text(text.slice(0, text.length - 1));
      return ls.animateCreatorNameTimeoutId = setTimeout((function() {
        return animateCreatorName(name);
      }), random);
    } else {
      if (text.length !== name.length) {
        if (text.length === 0) {
          $('#pagefliptyping').text(name.slice(0, 1));
        } else {
          $('#pagefliptyping').text(name.slice(0, text.length + 1));
        }
        return ls.animateCreatorNameTimeoutId = setTimeout((function() {
          return animateCreatorName(name, true);
        }), random);
      }
    }
  };

  $(function() {
    var icon, key, logo, placeholder, sponsor, stayUpdated;
    if (DEBUG) {
      $('html').css('cursor', 'auto');
      $('#container').css('overflow-y', 'auto');
      $('body').on('keypress', function(e) {
        if (e.which === 13) {
          $('#overlay').toggle();
          $('#fadeOutNews').toggle();
          $('#logo').toggle();
          $('#pageflip').toggle();
        }
        if (e.which === 32) {
          e.preventDefault();
          switch (ls.infoscreenOfficeStatus) {
            case 'waffle':
              return updateOffice('error');
            case 'error':
              return updateOffice('open');
            case 'open':
              return updateOffice('closed');
            case 'closed':
              return updateOffice('meeting');
            case 'meeting':
              return updateOffice('bun');
            case 'bun':
              return updateOffice('cake');
            case 'cake':
              return updateOffice('coffee');
            case 'coffee':
              return updateOffice('pizza');
            case 'pizza':
              return updateOffice('taco');
            case 'taco':
              return updateOffice('waffle');
            default:
              return updateOffice('error');
          }
        }
      });
    }
    ls.removeItem('infoscreenOfficeStatus');
    ls.removeItem('infoscreenOfficeStatusMessage');
    if (ls.showAffiliation2 !== 'true') {
      $('#news #right').hide();
      $('#news #left').attr('id', 'full');
      Analytics.trackEvent('loadSingleAffiliation', ls.affiliationKey1);
      Analytics.trackEvent('loadAffiliation1', ls.affiliationKey1);
    } else {
      Analytics.trackEvent('loadDoubleAffiliation', ls.affiliationKey1 + ' - ' + ls.affiliationKey2);
      Analytics.trackEvent('loadAffiliation1', ls.affiliationKey1);
      Analytics.trackEvent('loadAffiliation2', ls.affiliationKey2);
    }
    if (ls.showOffice !== 'true') {
      $('#office').hide();
    }
    if (ls.showOffice !== 'true') {
      $('#todays').hide();
    }
    if (ls.showCantina !== 'true') {
      $('#cantinas').hide();
    }
    if (ls.showBus !== 'true') {
      $('#bus').hide();
    }
    key = ls.affiliationKey1;
    logo = Affiliation.org[key].logo;
    icon = Affiliation.org[key].icon;
    placeholder = Affiliation.org[key].placeholder;
    sponsor = Affiliation.org[key].sponsor;
    if (sponsor !== void 0) {
      $('#logo').prop('src', sponsor);
    } else {
      $('#logo').prop('src', logo);
    }
    $('link[rel="shortcut icon"]').attr('href', icon);
    $('#news .post img').attr('src', placeholder);
    Analytics.trackEvent('loadPalette', ls.affiliationPalette);
    if (Browser.onWindows()) {
      $('#pfText').attr("style", "bottom:9px;");
      $('#pfLink').attr("style", "bottom:9px;");
    }
    changeCreatorName(ls.extensionCreator);
    setInterval((function() {
      return $(".pageflipcursor").animate({
        opacity: 0
      }, "fast", "swing", function() {
        return $(this).animate({
          opacity: 1
        }, "fast", "swing");
      });
    }), 600);
    officeFontRotate();
    setInterval((function() {
      return officeFontRotate();
    }), 1800000);
    setInterval((function() {
      var hours, minutes, _d;
      _d = new Date();
      minutes = _d.getMinutes();
      hours = _d.getHours();
      if (minutes < 10) {
        minutes = '0' + minutes;
      }
      if (hours < 10) {
        hours = '0' + hours;
      }
      $("#bus #clock #minutes").html(minutes);
      return $("#bus #clock #hours").html(hours);
    }), 1000);
    setInterval((function() {
      var linebreaks, num, random;
      random = Math.ceil(Math.random() * 25);
      linebreaks = ((function() {
        var _i, _results;
        _results = [];
        for (num = _i = 0; 0 <= random ? _i <= random : _i >= random; num = 0 <= random ? ++_i : --_i) {
          _results.push('<br />');
        }
        return _results;
      })()).join(' ');
      $('#overlay').html(linebreaks + 'preventing image burn-in...');
      $('#overlay').css('opacity', 1);
      return setTimeout((function() {
        return $('#overlay').css('opacity', 0);
      }), 3500);
    }), 1800000);
    stayUpdated = function(now) {
      var loopTimeout, timeout;
      console.lolg(ONLINE_MESSAGE);
      loopTimeout = DEBUG ? PAGE_LOOP_DEBUG : PAGE_LOOP;
      intervalId = setInterval((function() {
        return mainLoop();
      }), PAGE_LOOP);
      timeout = now ? 0 : 2000;
      return setTimeout((function() {
        return mainLoop(true);
      }), timeout);
    };
    window.addEventListener('online', stayUpdated);
    window.addEventListener('offline', function() {
      console.lolg(OFFLINE_MESSAGE);
      clearInterval(intervalId);
      return updateBus();
    });
    if (navigator.onLine) {
      return stayUpdated(true);
    } else {
      return mainLoop();
    }
  });

}).call(this);
